name: Build and Test C++

on:
  push:
    paths:
      - '**/CMakeLists.txt'
      - '**.c'
      - '**.h'
      - '**.cpp'
      - '**.hpp'
      - '**.proto'
      - '.github/workflows/build_and_test_cpp.yml'
      - '!docs/**'
      - '!notes/**'
  pull_request:
    paths:
      - '**/CMakeLists.txt'
      - '**.c'
      - '**.h'
      - '**.cpp'
      - '**.hpp'
      - '**.proto'
      - '.github/workflows/build_and_test_cpp.yml'
      - '!docs/**'
      - '!notes/**'

env:
  ACT: false

jobs:
  build-cpp:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release, Debug]
        cpp_compiler: [g++, clang++]

    steps:
    - uses: actions/checkout@v4

    - name: Create cache directories
      run: |
        mkdir -p "/home/runner/abseil-install"
        mkdir -p "/home/runner/protobuf-install"
        mkdir -p "/home/runner/cppzmq-install"
        mkdir -p "/home/runner/zeromq-install"
        mkdir -p "/home/runner/googletest"

    # --- Cache Steps ---
    - id: cache_abseil
      name: Cache Abseil Install Directory
      uses: actions/cache@v4
      with:
        path: /home/runner/abseil-install
        key: abseil-${{ runner.os }}

    - id: cache_protobuf
      name: Cache Protobuf Install Directory
      uses: actions/cache@v4
      with:
        path: /home/runner/protobuf-install
        key: protobuf-${{ runner.os }}

    - id: cache_zeromq
      name: Cache ZeroMQ Install Directory
      uses: actions/cache@v4
      with:
        path: /home/runner/zeromq-install
        key: zeromq-${{ runner.os }}

    - id: cache_cppzmq
      name: Cache cppzmq Install Directory
      uses: actions/cache@v4
      with:
        path: /home/runner/cppzmq-install
        key: cppzmq-${{ runner.os }}

    - id: cache_googletest
      name: Cache GoogleTest Build Directory
      uses: actions/cache@v4
      with:
        path: /home/runner/googletest
        key: googletest-${{ runner.os }}

    - name: Cache debug
      run: |
        echo "Cache debug"
        echo "Cache abseil: ${{ steps.cache_abseil.outputs.cache-hit }}"
        echo "Cache protobuf: ${{ steps.cache_protobuf.outputs.cache-hit }}"
        echo "Cache zeromq: ${{ steps.cache_zeromq.outputs.cache-hit }}"
        echo "Cache cppzmq: ${{ steps.cache_cppzmq.outputs.cache-hit }}"
        echo "Cache googletest: ${{ steps.cache_googletest.outputs.cache-hit }}"
        echo "Home folder debug (2 levels)"
        find $HOME -maxdepth 2 -print

    # --- End Cache Steps ---

    # Install dependencies only locally when ACT=true
    - name: Install Act dependencies
      if: ${{ env.ACT == 'true' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake

    # Install Bazelisk (Bazel version manager) without sudo, locally
    - name: Install Bazelisk for act
      if: ${{ env.ACT == 'true' }}
      run: |
        sudo apt update && sudo apt install -y curl
        curl -Lo /usr/local/bin/bazelisk https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64
        chmod +x /usr/local/bin/bazelisk
        sudo ln -sf /usr/local/bin/bazelisk /usr/local/bin/bazel
        bazel --version

    # Install abseil libraries to a local directory (no sudo)
    - name: Install Abseil Libraries
      if: steps.cache_abseil.outputs.cache-hit != 'true'
      run: |
        mkdir -p "$HOME/abseil"
        git clone https://github.com/abseil/abseil-cpp.git "$HOME/abseil"
        cd "$HOME/abseil"
        git checkout 20250127.0
        mkdir build && cd build
        cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$HOME/abseil-install" ..
        make "-j$(nproc)"
        make install


    # --- Build Protoc and Protobuf ---
    - name: Build Protoc and Protobuf
      if: steps.cache_protobuf.outputs.cache-hit != 'true'
      run: |
        PB_VERSION=29.3
        curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v${PB_VERSION}/protobuf-${PB_VERSION}.zip"
        mkdir -p "$HOME/protobuf"
        unzip -o "protobuf-${PB_VERSION}.zip" -d "$HOME/protobuf"
        rm "protobuf-${PB_VERSION}.zip"
        cd "$HOME/protobuf/protobuf-${PB_VERSION}"
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX="$HOME/protobuf-install" \
              -DCMAKE_CXX_STANDARD=17 \
              -Dprotobuf_ABSL_PROVIDER=package \
              -Dprotobuf_BUILD_TESTS=OFF .. \
              -Dabsl_DIR="$HOME/abseil-install/lib/cmake/absl" ..
        make -j"$(nproc)"
        make install
        echo "$HOME/protobuf-install/bin" >> "$GITHUB_PATH"

    # --- Install LibZMQ ---
    - name: Install LibZMQ
      if: steps.cache_zeromq.outputs.cache-hit != 'true'
      run: |
        ZMQ_VERSION=4.3.5
        mkdir -p "$HOME/zeromq"
        curl -LO "https://github.com/zeromq/libzmq/releases/download/v${ZMQ_VERSION}/zeromq-${ZMQ_VERSION}.zip"
        unzip -o "zeromq-${ZMQ_VERSION}.zip" -d "$HOME/zeromq"
        mv "$HOME/zeromq/zeromq-${ZMQ_VERSION}/" "$HOME/zeromq/zeromq-source/"
        cd "$HOME/zeromq/zeromq-source"
        mkdir build && cd build
        cmake .. \
          -DZMQ_BUILD_TESTS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX="$HOME/zeromq-install"
        make -j"$(nproc)"
        make install
        echo "ZeroMQ_DIR=$HOME/zeromq-install/lib/cmake/ZeroMQ" >> "$GITHUB_ENV"

    # --- Install cppzmq ---
    - name: Install cppzmq
      if: steps.cache_cppzmq.outputs.cache-hit != 'true'
      run: |
        CPPZMQ_VERSION=4.10.0
        curl -LO "https://github.com/zeromq/cppzmq/archive/refs/tags/v${CPPZMQ_VERSION}.zip"
        mkdir -p "$HOME/cppzmq"
        unzip -o "v${CPPZMQ_VERSION}.zip" -d "$HOME/cppzmq"
        rm "v${CPPZMQ_VERSION}.zip"
        cd "$HOME/cppzmq/cppzmq-${CPPZMQ_VERSION}"
        mkdir build && cd build
        cmake .. -DZeroMQ_DIR="$HOME/zeromq-install/lib/cmake/ZeroMQ" \
          -DCMAKE_INSTALL_PREFIX="$HOME/cppzmq-install"
        make -j"$(nproc)"
        make install

    # --- Create Protoc Files ---
    - name: Create Protoc files
      run: bash scripts/proto_manual.sh

    # --- Install tree for debugging (if ACT is true) ---
    - name: Install tree
      if: ${{ env.ACT == 'true' }}
      run: sudo apt-get install -y tree

    - name: Display directory structure
      if: ${{ env.ACT == 'true' }}
      run: |
        TREE_SHOW_PATH="$HOME/zeromq-install"
        echo "Directory structure debug of ${TREE_SHOW_PATH}"
        tree "$TREE_SHOW_PATH"

    # --- Install Google Test ---
    - name: Install Google Test
      if: steps.cache_googletest.outputs.cache-hit != 'true'
      run: |
        mkdir -p "$HOME/googletest"
        git clone https://github.com/google/googletest.git "$HOME/googletest"
        cd "$HOME/googletest"
        mkdir build && cd build
        cmake ..
        make -j"$(nproc)"
        sudo make install

    # --- Set reusable strings for build output directory ---
    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # --- Configure CMake ---
    - name: Configure CMake
      run: |
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
              -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}" \
              -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
              -DBUILD_TESTS=ON \
              -Dabsl_DIR="$HOME/abseil-install/lib/cmake/absl" \
              -DGTEST_ROOT=/usr/local \
              -S "${{ github.workspace }}"

    # --- Build the project ---
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # --- Export binaries as artifacts ---
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}-${{ github.sha }}-${{ github.event_name }}
        path: build

  test-cpp:
    runs-on: ubuntu-latest
    needs: build-cpp 
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release, Debug]
        cpp_compiler: [g++, clang++]

    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}-${{ github.sha }}-${{ github.event_name }}
        path: build

    - name: Install CMake and tree
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake tree

    - name: Tree debug
      run: tree

    # Set executable permissions for tests
    - name: Set executable permissions
      run: chmod +x build/build/runTests

    - name: Run Tests
      working-directory: ${{ github.workspace }}/build
      run: |
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{ github.workspace }}/build/backend/proto/generated
        ctest --output-on-failure --verbose 2>ctest.error
        cat ctest.error
        [ -s ctest.error ] && exit 1 || exit 0
