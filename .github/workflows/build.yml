name: CMake build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
    ACT: false
    # TODO maybe add CXX standard to this file?

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            cpp_compiler: g++
          - os: ubuntu-latest
            cpp_compiler: clang++

    steps:

    - uses: actions/checkout@v4

    # Install dependencies only locally when ACT=true
    - name: Install Act dependencies
      if: ${{ env.ACT == 'true' }}
      run: |
        sudo apt-get update && sudo apt-get install -y cmake clang

    # Install Bazelisk (Bazel version manager) without sudo, locally
    - name: Install Bazelisk
      if: ${{ env.ACT == 'true' }}
      run: |
        mkdir -p $HOME/bin
        curl -Lo $HOME/bin/bazelisk https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64
        chmod +x $HOME/bin/bazelisk
        ln -sf $HOME/bin/bazelisk $HOME/bin/bazel
        bazel --version  # Verify installation

    # Install abseil libraries to a local directory (no sudo)
    - name: Install Abseil Libraries
      run: |
        mkdir -p $HOME/abseil
        git clone https://github.com/abseil/abseil-cpp.git $HOME/abseil
        cd $HOME/abseil
        git checkout 20250127.0
        mkdir build && cd build
        cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/abseil-install ..
        make -j"$(nproc)"
        make install
        cd $HOME/abseil

    # Build protoc, protobuf, and libprotobuf-dev in a local directory (no sudo)
    - name: Build Protoc and Protobuf
      run: |
        PB_VERSION=29.3
        curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v${PB_VERSION}/protobuf-${PB_VERSION}.zip"
        mkdir -p $HOME/protobuf
        unzip -o "protobuf-${PB_VERSION}.zip" -d $HOME/protobuf
        rm "protobuf-${PB_VERSION}.zip"
        cd $HOME/protobuf/protobuf-${PB_VERSION}
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=$HOME/protobuf-install \
              -DCMAKE_CXX_STANDARD=17 \
              -Dprotobuf_ABSL_PROVIDER=package \
              -Dprotobuf_BUILD_TESTS=OFF .. \
              -Dabsl_DIR=$HOME/abseil-install/lib/cmake/absl ..
        make -j"$(nproc)"
        make install
        echo "$HOME/protobuf-install/bin" >> $GITHUB_PATH
        echo "$HOME/protobuf-install/bin" >> $GITHUB_ENV
        protoc --version

    # Install LibZMQ locally (no sudo)
    - name: Install LibZMQ
      run: |
        mkdir -p $HOME/zeromq
        echo "deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./" >> $HOME/zeromq/sources.list
        wget https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key -O- | apt-key add
        apt-get install -y libzmq3-dev

    # Install ZeroMQ from source in a local directory (no sudo)
    - name: Install ZeroMQ
      run: |
        git clone https://github.com/zeromq/zmqpp.git $HOME/zmqpp
        cd $HOME/zmqpp
        make
        make install

    # Get this out of here when you get proto working for python in CMake
    - name: Create Protoc files
      run: |
        bash proto_manual.sh

    # Install tree for debugging (no sudo)
    - name: Install tree
      if: ${{ env.ACT == 'true' }}
      run: |
        sudo apt-get install -y tree

    # Display directory structure in debug
    - name: Display directory structure
      if: ${{ env.ACT == 'true' }}
      run: |
        echo "Directory structure of cwd"
        tree 

    # Set reusable strings for build output directory
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake
    - name: Configure CMake
      run: |
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
              -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}" \
              -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
              -S "${{ github.workspace }}"

    # Build the project
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # Run tests
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
