{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "middleware build-dev + generate proto",
            "type": "shell",
            "command": "mkdir -p build && cd build; cmake -DCMAKE_BUILD_TYPE=Debug .. && make -j",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "icon": {
                "dark": "resources/dark/build.svg",
                "light": "resources/light/build.svg",
                "color": "terminal.ansiGreen"
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "middleware build-dev + generate proto + build tests",
            "type": "shell",
            "command": "mkdir -p build && cd build; cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON .. && make -j",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "icon": {
                "dark": "resources/dark/build.svg",
                "light": "resources/light/build.svg",
                "color": "terminal.ansiYellow"
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "middleware build and test all",
            "type": "shell",
            "command": "bash scripts/test_manual_all.sh",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "icon": {
                "id": "check",
                "color": "terminal.ansiCyan"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "options": {
                "env": {
                    "CI_BUILD_ENV": "Debug"
                }
            },
        },
        {
            "label": "python test",
            "type": "shell",
            "command": "bash scripts/test_manual_python.sh",
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "icon": {
                "id": "check",
                "color": "terminal.ansiCyan"
            }
        },
        {
            "label": "start socat manually",
            "type": "shell",
            "command": "socat -d -d pty,raw,echo=0 pty,raw,echo=0",
            "icon": {
                "id": "debug-console"
            },
            "problemMatcher": []
        },
        {
            "label": "start emulator manually",
            "type": "shell",
            "command": "./venv/bin/python -u -Xfrozen_modules=off -m backend.device_emulator --device-rocket ${input:terminalPath}",
            "icon": {
                "id": "debug-console"
            },
            "problemMatcher": []
        },
        {
            "label": "start ZeroMQ debug subscriber",
            "type": "shell",
            "command": "${workspaceFolder}/.venv/bin/python",
            "args": [
                "backend/tools/debug_zeromq_sub_raw.py",
                "gcs_rocket"
            ],
            "icon": {
                "id": "debug-console"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "start websocket debug subscriber",
            "type": "shell",
            "command": "${workspaceFolder}/.venv/bin/python",
            "args": [
                "backend/tools/debug_websocket.py"
            ],
            "icon": {
                "id": "debug-console"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "start frontend API manually",
            "type": "shell",
            "command": "/Users/freddy/.pyenv/versions/3.11.1/bin/python",
            "args": [
                "backend/frontend_api.py",
                "--socket-path",
                "gcs_rocket"
            ],
            "icon": {
                "id": "debug-console"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "start frontend API manually",
            "type": "shell",
            "command": "/Users/freddy/.pyenv/versions/3.11.1/bin/python",
            "args": [
                "backend/frontend_api.py",
                "--socket-path",
                "gcs_rocket"
            ],
            "icon": {
                "id": "debug-console"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "start hardware pendant emulator manually",
            "type": "shell",
            "command": "./venv/bin/python",
            "args": [
                "backend/pendant_emulator.py"
            ],
            "icon": {
                "id": "debug-console"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "Compile Manual Protobuf Payload",
            "type": "shell",
            "command": "protoc",
            "args": [
                "-I=${workspaceFolder}/backend/proto/payloads",
                "--cpp_out=${workspaceFolder}/backend/proto/generated/payloads",
                "${workspaceFolder}/backend/proto/payloads/${input:outputPath}"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                {
                    "owner": "protobuf",
                    "fileLocation": [
                        "relative",
                        "${workspaceFolder}/backend/proto/payloads"
                    ],
                    "pattern": {
                        "regexp": "^([^:]+):(\\d+):(\\d+):\\s(.*)$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "message": 4
                    }
                }
            ],
            "icon": {
                "id": "code"
            }
        },
        {
            "label": "Tailwind Dev",
            "type": "shell",
            "windows": {
                "command": ".\\third_party\\tailwindcss.exe",
                "args": [
                    "--cwd",
                    ".\\frontend\\static",
                    "-i",
                    ".\\css\\tailwind.input.css",
                    "-o",
                    ".\\css\\tailwind.css",
                    "--watch",
                    "--optimize"
                ]
            },
            "linux": {
                "command": "./third_party/tailwindcss",
                "args": [
                    "--cwd",
                    "./frontend",
                    "-i",
                    "./static/css/tailwind.input.css",
                    "-o",
                    "./static/css/tailwind.css",
                    "--watch",
                    "--optimize"
                ]
            },
            "icon": {
                "id": "paintcan"
            },
            "problemMatcher": []
        },
        {
            "label": "start frontend (no API)",
            "type": "shell",
            "command": "flask",
            "args": [
                "--app",
                "frontend.flask_server",
                "--debug",
                "run",
                "--port=8008"
            ],
            "icon": {
                "id": "debug-console",
                "color": "terminal.ansiRed"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "start frontend (dev test mode)",
            "type": "shell",
            "command": "source",
            "args": [
                ".venv/bin/activate",
                "&&",
                "python3",
                "./rocket.py",
                "dev",
                "--nopendant",
                "--frontend",
                "--interface",
                "TEST"
            ],
            "icon": {
                "id": "debug-console",
                "color": "terminal.ansiRed"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "start frontend (replay simulation mode)",
            "type": "shell",
            "command": "source",
            "args": [
                ".venv/bin/activate",
                "&&",
                "python3",
                "./rocket.py",
                "replay",
                "--mode",
                "simulation",
                "--simulation",
                "TEST"
            ],
            "icon": {
                "id": "debug-console",
                "color": "terminal.ansiRed"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "start frontend (replay mission 20250504)",
            "type": "shell",
            "command": "source",
            "args": [
                ".venv/bin/activate",
                "&&",
                "python3",
                "./rocket.py",
                "replay",
                "--mode",
                "mission",
                "--mission",
                "20250504"
            ],
            "icon": {
                "id": "debug-console",
                "color": "terminal.ansiRed"
            },
            "options": {
                "env": {
                    "PYTHONPATH": "${workspaceFolder}"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "Run Simulation",
            "type": "shell",
            "command": "./.venv/bin/python",
            "args": [
                "backend/simulation/run_simulation.py",
                "--device-rocket",
                "/tmp/gcs_rocket.sock"
            ],
            "options": {
                "cwd": "${workspaceFolder}",
                "env": {
                    "PYTHONPATH": "${workspaceFolder}:$PYTHONPATH"
                }
            },
            "group": "build",
            "problemMatcher": [],
            "icon": {
                "id": "rocket",
                "color": "terminal.ansiBlue"
            }
        },
        {
            "label": "Play Replay System",
            "type": "shell",
            "command": "./.venv/bin/python",
            "args": [
                "backend/replay_system/replay_engine.py",
                "--device-rocket",
                "/tmp/gcs_rocket.sock",
                "--mission-type",
                "20250504"
            ],
            "options": {
                "cwd": "${workspaceFolder}",
                "env": {
                    "PYTHONPATH": "${workspaceFolder}:$PYTHONPATH"
                }
            },
            "group": "build",
            "problemMatcher": [],
            "icon": {
                "id": "rocket",
                "color": "terminal.ansiBlue"
            }
        }
    ],
    "inputs": [
        {
            "id": "outputPath",
            "type": "promptString",
            "description": "Enter the proto file path relative to backend/proto/payloads/",
            "default": "AV_TO_GCS_DATA_1.proto"
        },
        {
            "id": "terminalPath",
            "type": "promptString",
            "description": "Enter the psuedoterminal /dev path",
            "default": "/dev/ttys..."
        }
    ]
}